/**
 * How should one perform type inference 
 * for variable x in this program? 
 *
 * Iterate to a fixed point (abstract interpretation).
 */

class C1()  extends Obj {
   def foo():  C1 {
       return C1();    /* Added method */
   }
}

class C2() extends C1 {
   def foo():  C1 {
        return C1();    /* Conforms to C1.foo() */
   }
}

class C3() extends C2 { 
   def foo(): C2 {
        return C2();   /* Conforms to C2.foo() */
   }
}

class C4() extends C3 {
    def foo() : C3 {
         return C3();  /* Conforms to C3.foo() */
    }
}

/* Obviously you can extend this pattern indefintely.  
 * Now type x below ... what should happen? 
 */ 
x = C4();
while true{
   x = x.foo();      /* Type system should accept this */
}

/* 
     Discussion: 
     When this converges, we will see that x has type C1,
     which has method foo, so this is type-correct.
     ...It's still an infinite loop though
*/ 



                  